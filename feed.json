{
    "version": "https://jsonfeed.org/version/1",
    "title": "Tech Blog",
    "description": "LC2808",
    "home_page_url": "https://chisato-lycoreco.github.io",
    "items": [
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/26/work/research/research1/",
            "url": "https://chisato-lycoreco.github.io/2022/08/26/work/research/research1/",
            "title": "NLP",
            "date_published": "2022-08-26T15:38:57.854Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/26/tech/programming/python/python1/",
            "url": "https://chisato-lycoreco.github.io/2022/08/26/tech/programming/python/python1/",
            "title": "流言终结者之python性能优化技巧",
            "date_published": "2022-08-26T15:38:57.824Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最近搬砖的工作涉及到很多基础的 python 策略代码，因此一时兴起上网查了查 python 代码优化的方案。<br>\n本文一方面是汇总一些提升代码性能的编码技巧，更主要的是验证它们有效与否，顺便试着推理它们有效或者无效的原因。</p>\n<h1 id=\"列表生成式-2022826\"><a class=\"markdownIt-Anchor\" href=\"#列表生成式-2022826\">#</a> 列表生成式 （2022/8/26）</h1>\n<h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p>创建一个有规律的数组，并且为了实现这个规律不得不使用 for 循环的时候。例如：  <code>[1*1,2*2,3*3,...,n*n]</code>  , 其中  <code>n=1000</code>  。</p>\n<h2 id=\"传统方案-vs-列表生成式方案\"><a class=\"markdownIt-Anchor\" href=\"#传统方案-vs-列表生成式方案\">#</a> 传统方案 vs 列表生成式方案</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>传统方案</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>time elapsed<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>127601s</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>列表生成式方案</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>time elapsed<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>061128s</pre></td></tr></table></figure><p>结果显示，使用列表生成式的代码执行速度比使用 for 循环 append 快了不止一倍。而对于更大的 n 值，这一结论同样适用。<br>\n因此列表生成式在效率上的优势是显而易见的。<br>\n进一步地，在有 if 判断的场景下考察两者的差别。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>传统方案</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>time elapsed<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>109248s</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>列表生成式方案</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>time elapsed<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>061044s</pre></td></tr></table></figure><p>不难发现，列表生成式方案的耗时几乎没有变化，而传统方案则明显变快了。<br>\n由此可以推断出一个结论，传统方案之所以慢是由于  <code>append()</code>  效率较低所致。<br>\n事实上，  <code>append()</code>  是一个时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的操作，它需要从头开始遍历整个数组的内存空间，直到到达数组尾部。<br>\n而创建列表时原地赋值则是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 时间复杂度的操作，差距显而易见。<br>\n在添加了  <code>if</code>  判断语句之后，虽然循环的次数没有变化，甚至还多了  <code>if</code>  判断的操作，但是  <code>append()</code>  的次数却显著减少了。</p>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\">#</a> 结论</h2>\n<ul>\n<li>列表生成式方法比 for-append 写法快得多。</li>\n<li>列表生成式方法之所以比 for-append 写法快，是由于  <code>append()</code>  的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> ，而原地赋值的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h1 id=\"内置函数\"><a class=\"markdownIt-Anchor\" href=\"#内置函数\">#</a> 内置函数</h1>\n<h1 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h1>\n<h1 id=\"多重赋值\"><a class=\"markdownIt-Anchor\" href=\"#多重赋值\">#</a> 多重赋值</h1>\n<h1 id=\"itertools模块\"><a class=\"markdownIt-Anchor\" href=\"#itertools模块\">#</a>  <code>itertools</code>  模块</h1>\n<h1 id=\"lru-cache缓存\"><a class=\"markdownIt-Anchor\" href=\"#lru-cache缓存\">#</a> LRU Cache 缓存</h1>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/26/tech/AI/hello-world/",
            "url": "https://chisato-lycoreco.github.io/2022/08/26/tech/AI/hello-world/",
            "title": "Hello World",
            "date_published": "2022-08-26T15:38:57.819Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/26/entertainment/games/game1/",
            "url": "https://chisato-lycoreco.github.io/2022/08/26/entertainment/games/game1/",
            "title": "PARQUET",
            "date_published": "2022-08-26T15:38:57.794Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/26/hello-world/",
            "url": "https://chisato-lycoreco.github.io/2022/08/26/hello-world/",
            "title": "Hello World",
            "date_published": "2022-08-26T15:00:56.488Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://chisato-lycoreco.github.io/2022/08/23/work/business/first%20month/",
            "url": "https://chisato-lycoreco.github.io/2022/08/23/work/business/first%20month/",
            "title": "工作第一个月的心得分享",
            "date_published": "2022-08-22T17:38:40.000Z",
            "content_html": "<pre><code>大家好啊，我是千束(不是)。今年25岁，是一名就职于某BAT的研发工程师，一个普通上班族。\n一年一度，烂漫离披，似长江去浪。总是在回顾过往岁月的时候，才惊觉光阴流逝之快、之悄无声息。如果被问及过去的25年给我带来了什么，我也许会陷入长时间的恍惚吧。于是在这个微妙的节点，我临时起意，想要为接下来的人生留下一些痕迹。我并不是个善于表达的人，搭建这个个人博客一方面是为了复盘工作中遇到的问题和困难，另一方面是为了通过输出分享的方式提升自己的技术能力。但是出于保密的考虑，博客中的任何文章都不会涉及公司、部门和工作中的具体业务。\n写到这里的时候，我的另一个人格突然发问：“这种严肃的氛围到底要持续到什么时候啊？” 好吧我不装了。嘻嘻。\n回归正题！这一个月的工作或许应该分解为三个维度：面向业务编程、面向同事编程和面向领导编程。\n事实上，在入职的头一个月里我并没有接手任何实质性的工作，只是在mentor的指导下仍然像无头苍蝇一样进行一些学习，当然主要还是熟悉业务。由于tob业务的复杂程度超乎预期，为了读懂业务代码的逻辑，我几乎没有多余的精力去学习那些未来会用到但眼下的业务不需要的技术。当然这也是由于本人比较执着于1075这种“相对而言”WLB的作息安排，尽管组内大部分同事都要忙到8-9点才走。至于他们是不是真的在忙，姑且不论^^。至于我，除开白开水一样的新人培训以外，大部分工作时间都在读文档、读代码、写梳理文档中度过...尽管如此！！！\n尽管如此！！！试用期的第一场战斗还是以“满 身 疮 痍”告终。o(╥﹏╥)o\n众所都周知啊，大多数互联网企业都有的一项光荣传统就是T（技术）序列的技术/业务串讲，毕竟在这里技术才是第一生产力嘛。所谓的串讲其实就是把你入职以来的全部所学（也没有那么夸张，一般都有一个确切的主题）向你的直属上级和同事进行总结式的汇报。一般来说，串讲并非走过场，但也并不是什么特别正式和讲究的汇报演讲。它的意义在于让你的同事和上级知道你对业务/技术的掌握到了什么程度，同时帮助你（在大家的严刑拷打下）查漏补缺，从而能够尽管地接手业务需求。一般串讲的时长安排在45-60分钟，整个小组和你的直属上级都会参与（也不排除会有不认识的大神或者大老板来凑热闹），其中前30分钟是你的show time，剩下的就是紧张刺激的灵魂拷问环节。为了准备这场串讲，我几乎进入了走火入魔的状态，疯狂地读代码、写总结、画导图。之所以称之为走火入魔，是因为这种钻牛角尖的行为为最终的失败埋下了伏笔。\n事实上，在串讲的show time环节，我一度觉得自己很帅。因为我自认为已经把业务代码和其中涉及的一系列算法进行了一番透彻的分析和解读。讲罢，我嘴角微扬，环顾整个会议室，仿佛沉睡已久的王者在王座上醒来，等待着接受万众膜拜...然后大概在十几秒钟的沉默之后，现实给我来了一发重炮：“你的上下游是什么？” 几乎在这个提问到来的瞬间，我就陷入了恍惚，甚至有一种脱力的感觉。因为我意识到，不但眼前这个问题使我大脑一片空白，之后的一系列拷问我也难以应付。于是这次串讲就在本人的无限懵逼之中结束了，也就是说我当时根本没有在想事情，甚至在意淫宇宙是怎么诞生的。\n总的来说，几乎所有提问都是围绕更加宏观的业务层面展开的。打个比方就是你已经被困在山里两年了，只想着今天要吃点什么野果野菜来果腹，这时候突然走过来一个和尚问你从哪里来往哪里去...问得好啊！我不知道。\n对于这起惨案，我个人的反思有两点：\n（1）不要总是埋头拧螺丝，也要多绕着厂里转转，看看别的流水线在干嘛，你的生产材料从哪来，以及你的工件去了哪。说白了就是要理解你这个岗位存在的意义或者价值，只有明确了这一点才能更好地指导接下来的工作。当然了，实际的研发工作更多的是需要上下游之间的沟通协调，所以了解其他人在干什么就显得尤为重要。\n（2）其次，无论是大小规模的会议还是工作汇报，作为演讲者，首先要明确的是在整个受众群体中谁才是你真正的目标客户，也就是“谁的认可对你而言最为重要”。然后才能有针对地设计你的演讲内容和逻辑。拿厂里的工作来举例，当你的直属领导和工友们坐在台下听你汇报工作的时候，你应该说些什么？如果你只是说螺丝是怎么拧的，工友们会觉得你是个实在人，能处。但领导不拧螺丝，也不想知道怎么拧螺丝，他可能更关心为什么要你拧螺丝，以及你的螺丝有什么用，那么他听完就只会觉得你这个人很捞，很短视，成不了大器。然后就是一个很简单也很现实的问题，领导和工友，你更需要谁的赏识？当然了，你完全可以全都要。但为了前途考虑，还是应该保住领导这块基本盘。\n</code></pre>\n",
            "tags": []
        }
    ]
}